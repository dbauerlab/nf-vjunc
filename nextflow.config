#!/usr/bin/env nextflow

/*
 * -------------------------------------------------
 *  amchakra/pretosca config file
 * -------------------------------------------------
 * Main config
 */


// Main parameters
params {
  // General
  outdir = './results'
  tracedir = "${params.outdir}/pipeline_info"

  // 
  reverse_complement = false
}

// Enable by default nextflow tracing and place in trace dir location
// Updated from nf-core template to avoid file clashes

def trace_timestamp = new java.util.Date().format( 'yyyy-MM-dd_HH-mm-ss')
timeline {
    enabled = true
    file    = "${params.tracedir}/execution_timeline_${trace_timestamp}.html"
}
report {
    enabled = true
    file    = "${params.tracedir}/execution_report_${trace_timestamp}.html"
}
trace {
    enabled = true
    file    = "${params.tracedir}/execution_trace_${trace_timestamp}.txt"
}
dag {
    enabled = true
    file    = "${params.tracedir}/pipeline_dag_${trace_timestamp}.html"
}


// Include other configs
includeConfig 'conf/defaults.config'

// Create run profiles
profiles {
  crick { includeConfig 'https://raw.githubusercontent.com/nf-core/configs/master/conf/crick.config' }
  docker {
    docker.enabled = true
  }
  singularity {
    singularity.enabled = true
    singularity.autoMounts = true
  }
}

// Static details about the pipeline
manifest {
  name = ''
  author = ''
  homePage = 'https://github.com/dbauer-lab/nf-vjunc'
  description = ''
  nextflowVersion = '>=23.10'
  version = '1.0.0'
}

// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-euo', 'pipefail']

// Avoid this error:
// WARNING: Your kernel does not support swap limit capabilities or the cgroup is not mounted. 
// Memory limited without swap.
// Testing this in nf-core after discussion here https://github.com/nf-core/tools/pull/351, 
//once this is established and works well, nextflow might implement this behavior as new default.
docker.runOptions = '-u \$(id -u):\$(id -g)'

// Resource labels
process {

    errorStrategy = { task.exitStatus in [143,137,104,134,139] ? 'retry' : 'finish' }
    maxRetries = 1
    maxErrors = '-1'

    withLabel: process_low {
        cpus = { check_max ( 4, 'cpus' )}
        memory = { check_max( 16.GB * task.attempt, 'memory' ) }
        time = { check_max( 4.h * task.attempt, 'time' ) }
    }

    withLabel: process_medium {
        cpus = { check_max ( 8, 'cpus' )}
        memory = { check_max( 32.GB * task.attempt, 'memory' ) }
        time = { check_max( 8.h * task.attempt, 'time' ) }
    }

    withLabel: process_high {
        cpus = { check_max ( 8, 'cpus' )}
        memory = { check_max( 64.GB * task.attempt, 'memory' ) }
        time = { check_max( 12.h * task.attempt, 'time' ) }
    }

    withLabel: process_gpu {
        queue = 'gpu'
        clusterOptions = '--gres=gpu'
        containerOptions = '--nv'
        cpus = { check_max ( 8, 'cpus' )}
        memory = { check_max( 32.GB * task.attempt, 'memory' ) }
        time = { check_max( 8.h * task.attempt, 'time' ) }
    }

}

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
  if (type == 'memory') {
    try {
      if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'time') {
    try {
      if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'cpus') {
    try {
      return Math.min( obj, params.max_cpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'gpus') {
    try {
      return Math.min( obj, params.max_gpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max gpus '${params.max_gpus}' is not valid! Using default value: $obj"
      return obj as String
    }
  }
}